openapi: 3.0.3
info:
  title: Palette Portal API
  version: 1.0.0 (1.0.0)
paths:
  /api/v1/chat/{chat_id}/:
    get:
      operationId: v1_chat_retrieve
      description: |-
        Checks if `request.user` is part of the chat, and retrieves the other chat member.
        Supports cursor pagination, which is used to load previous messages unto the chat log.
        Renders `chat.html` with the latest 10 messages in context, along with pagination information, username and status values.
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
        required: true
      tags:
      - chat_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/v1/chat/list/{other_user_id}/:
    post:
      operationId: v1_chat_create
      description: |-
        Creates a new between an artist and a collector.
        Returns a dict of the new chat data.
      parameters:
      - in: path
        name: other_user_id
        schema:
          type: string
        required: true
      tags:
      - chat_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/palette/artwork/:
    get:
      operationId: v1_artwork_list_retrieve
      description: |-
        Retrieves an existing cached list of all existing artworks.
        If none exists, retrieves an caches a non-cached list.
      tags:
      - artwork_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
          description: ''
    post:
      operationId: v1_artwork_create
      tags:
      - artwork_v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Artwork'
        required: true
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
          description: ''
  /api/v1/palette/artwork/{slug}/:
    get:
      operationId: v1_artwork_retrieve
      description: |-
        Retrieves an existing cached artwork object.
        If none exists, retrieves an caches an non-cached object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - artwork_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
          description: ''
    put:
      operationId: v1_artwork_update
      description: |-
        Updates an existing artwork object.
        Also updates the cache for both artwork list and corresponding artwork object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - artwork_v1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Artwork'
        required: true
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artwork'
          description: ''
    delete:
      operationId: v1_artwork_delete
      description: |-
        Deletes an existing artwork object.
        Also deletes the cache for corresponding artwork object, and updates that of artwork list.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - artwork_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '204':
          description: No response body
  /api/v1/palette/cart/:
    get:
      operationId: v1_cart_retrieve
      description: Retrieves a dict of all existing cart items.
      tags:
      - cart_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          description: No response body
  /api/v1/palette/cart/{artwork_id}/:
    post:
      operationId: v1_cart_create
      parameters:
      - in: path
        name: artwork_id
        schema:
          type: string
        required: true
      tags:
      - cart_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartUpdate'
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartUpdate'
          description: ''
    put:
      operationId: v1_cart_update
      parameters:
      - in: path
        name: artwork_id
        schema:
          type: string
        required: true
      tags:
      - cart_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartUpdate'
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartUpdate'
          description: ''
    delete:
      operationId: v1_cart_delete
      parameters:
      - in: path
        name: artwork_id
        schema:
          type: string
        required: true
      tags:
      - cart_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '204':
          description: No response body
  /api/v1/palette/genre/:
    get:
      operationId: v1_genre_list_retrieve
      description: |-
        Retrieves an existing cached list of all existing genres.
        If none exists, retrieves an caches a non-cached list.
      tags:
      - genre_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    post:
      operationId: v1_genre_create
      tags:
      - genre_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
  /api/v1/palette/genre/{slug}/:
    get:
      operationId: v1_genre_retrieve
      description: |-
        Retrieves an existing cached genre object.
        If none exists, retrieves an caches an non-cached object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - genre_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    put:
      operationId: v1_genre_update
      description: |-
        Updates an existing genre object.
        Also updates the cache for both genre list and corresponding genre object.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - genre_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Genre'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Genre'
        required: true
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
          description: ''
    delete:
      operationId: v1_genre_delete
      description: |-
        Deletes an existing genre object.
        Also deletes the cache for corresponding genre object, and updates that of genre list.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - genre_v1
      security:
      - jwtAuth: []
      - PaletteTokenAuthentication: []
      responses:
        '204':
          description: No response body
  /api/v1/user/change-password/begin/:
    post:
      operationId: v1_change_password_begin
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /api/v1/user/change-password/complete/{token}/:
    post:
      operationId: v1_change_password_complete
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /api/v1/user/cron-job/:
    get:
      operationId: v1_cronjob
      tags:
      - cronjob_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/login-jwt/:
    post:
      operationId: v1_jwt_login
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/user/login-knox/:
    post:
      operationId: v1_knox_login
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnoxLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KnoxLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KnoxLogin'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnoxLogin'
          description: ''
  /api/v1/user/logout-jwt/:
    post:
      operationId: v1_jwt_logout
      tags:
      - auth_v1
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/user/logout-knox/:
    post:
      operationId: v1_knox_logout_current_session
      tags:
      - auth_v1
      security:
      - PaletteTokenAuthentication: []
      responses:
        '200':
          description: No response body
  /api/v1/user/logout-knox-all/:
    post:
      operationId: v1_knox_logot_all_sessions
      description: |-
        Log the user out of all sessions
        I.E. deletes all auth tokens for the user
      tags:
      - auth_v1
      security:
      - PaletteTokenAuthentication: []
      responses:
        '200':
          description: No response body
  /api/v1/user/mock-login/:
    get:
      operationId: v1_authentication_test
      tags:
      - auth_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/user/profile/artist/:
    get:
      operationId: v1_artist_list_retrieve
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistProfile'
          description: ''
    post:
      operationId: v1_artist_create
      tags:
      - profile_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistProfile'
          description: ''
  /api/v1/user/profile/artist/{profile_id}/:
    get:
      operationId: v1_artist_retrieve
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistProfile'
          description: ''
    put:
      operationId: v1_artist_update
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ArtistProfile'
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistProfile'
          description: ''
    delete:
      operationId: v1_artist_delete
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/profile/collector/:
    get:
      operationId: v1_collector_list_retrieve
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectorProfile'
          description: ''
    post:
      operationId: v1_collector_create
      tags:
      - profile_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectorProfile'
          description: ''
  /api/v1/user/profile/collector/{profile_id}/:
    get:
      operationId: v1_collector_retrieve
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectorProfile'
          description: ''
    put:
      operationId: v1_collector_update
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CollectorProfile'
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectorProfile'
          description: ''
    delete:
      operationId: v1_collector_delete
      parameters:
      - in: path
        name: profile_id
        schema:
          type: string
        required: true
      tags:
      - profile_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/user/register/:
    post:
      operationId: v1_register
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/v1/user/social/begin/{backend}/:
    get:
      operationId: v1_social_authentication_begin
      parameters:
      - in: path
        name: backend
        schema:
          type: string
        required: true
      tags:
      - auth_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/social/complete/{backend}/:
    get:
      operationId: v1_social_authentication_complete
      parameters:
      - in: path
        name: backend
        schema:
          type: string
        required: true
      tags:
      - auth_v1
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/user/token/refresh/:
    post:
      operationId: v1_jwt_refresh
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
          description: ''
  /api/v1/user/verify-email/begin/:
    post:
      operationId: v1_verify_email_begin
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RequestEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RequestEmailVerification'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEmailVerification'
          description: ''
  /api/v1/user/verify-email/complete/{token}/:
    post:
      operationId: v1_verify_email_complete
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - auth_v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationOTP'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailVerificationOTP'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailVerificationOTP'
        required: true
      security:
      - PaletteTokenAuthentication: []
      - jwtAuth: []
      - GoogleOAuth2: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerificationOTP'
          description: ''
components:
  schemas:
    ArtistProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        bio:
          type: string
        instagram:
          type: string
          format: uri
          maxLength: 255
        user:
          type: string
          readOnly: true
      required:
      - id
      - user
    Artwork:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        artist:
          type: string
          readOnly: true
        genre:
          type: string
          readOnly: true
        genres:
          type: array
          items:
            type: string
          writeOnly: true
        name:
          type: string
          maxLength: 250
        slug:
          type: string
          maxLength: 250
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        image:
          type: string
          format: uri
        height:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        width:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,5}(?:\.\d{0,2})?$
          nullable: true
        is_available:
          type: boolean
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
      - artist
      - created
      - genre
      - genres
      - id
      - image
      - name
      - updated
    CartUpdate:
      type: object
      properties:
        quantity:
          $ref: '#/components/schemas/QuantityEnum'
    CollectorProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        bio:
          type: string
        instagram:
          type: string
          format: uri
          maxLength: 255
        user:
          type: string
          readOnly: true
      required:
      - id
      - user
    EmailVerificationOTP:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Genre:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 250
        slug:
          type: string
          maxLength: 250
          pattern: ^[-a-zA-Z0-9_]+$
        created:
          type: string
          format: date-time
          readOnly: true
      required:
      - created
      - id
      - name
    KnoxLogin:
      type: object
      description: |-
        Serializer for knox-based login.
        Updates `last_login` and deletes extra auth tokens.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        username:
          type: string
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - username
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message_type:
          $ref: '#/components/schemas/MessageTypeEnum'
        content:
          type: string
          readOnly: true
        is_reply:
          type: boolean
        previous_sender:
          type: string
          nullable: true
          maxLength: 50
        previous_content:
          type: string
          nullable: true
        previous_message_id:
          type: string
          format: uuid
          nullable: true
        sender:
          type: string
          readOnly: true
        created:
          type: string
          readOnly: true
        time:
          type: string
          readOnly: true
      required:
      - content
      - created
      - id
      - sender
      - time
    MessageTypeEnum:
      enum:
      - TXT
      - AUD
      type: string
      description: |-
        * `TXT` - Text
        * `AUD` - Audio
    PasswordChange:
      type: object
      properties:
        password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - password
    QuantityEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
        * `6` - 6
        * `7` - 7
        * `8` - 8
        * `9` - 9
        * `10` - 10
    RefreshToken:
      type: object
      description: |-
        Serializer for generating new access tokens, and blacklisting refresh tokens.
        Previous refresh token is blacklisted and replaced by a new token.
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    Register:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 200
        username:
          type: string
          readOnly: true
        password:
          type: string
          writeOnly: true
        confirm_password:
          type: string
          writeOnly: true
      required:
      - confirm_password
      - email
      - id
      - password
      - username
    RequestEmailVerification:
      type: object
      properties:
        email:
          type: string
      required:
      - email
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
  securitySchemes:
    GoogleOAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            email: Email address
            profile: Profile info
    PaletteTokenAuthentication:
      type: apiKey
      in: header
      name: Authorization
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oauth2:
      type: oauth2
      flows: {}
