"""
Django settings for portal project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import sys
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
dotenv_path = BASE_DIR / ".env"
load_dotenv(dotenv_path)



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = "django-insecure-iz2w*6h2+&ylo3e%@$2#yg1b9+gt)e7vs$404&92+d46k#+snv"


# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = os.getenv("DEBUG", "False").lower() == "true"


ALLOWED_HOSTS = ["palette-portal.com", "127.0.0.1"] if DEBUG else ["*"]  # Edit this depending on your production setup


# Application definitions

INSTALLED_APPS = [
    # "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Thirdparty apps
    "corsheaders",
    "rest_framework",
    "cloudinary_storage",
    "cloudinary",
    "knox",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    
    # OAuth2
    "oauth2_provider",
    "social_django",
    "drf_social_oauth2",
    
    # In-project apps
    "user.apps.UserConfig",
    "palette.apps.PaletteConfig",
    "chat.apps.ChatConfig",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware", # OAuth2
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "portal.middleware.JWTBlacklistMiddleware",  # Checks for blacklisted access tokens
    "portal.middleware.ClearAuthHeaders", # Removes auth for 'anon' views
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "portal.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR/"templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "portal.context_processors.is_debug", # Checks DEBUG mode
            ],
        },
    },
]


WSGI_APPLICATION = "portal.wsgi.application"
ASGI_APPLICATION = (
    "portal.asgi.application"  # Used to locate routing configuration by channels
)



# ----------------------------------------------------------------------------------------------------
# CACHE / DATABASE / SESSIONS / STORAGE 
# ----------------------------------------------------------------------------------------------------

# Cache settings

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("REDIS_URL"),
    },
    "session_cache": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("SESSION_CACHE_REDIS_URL"),
    },
}


# Session settings (using a cache-db backend)

CART_SESSION_ID = "cart"  # For cart
REFRESH_SESSION_ID = "refresh"  # For refresh token
SESSION_CACHE_ALIAS = "session_cache"
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"


# Celery settings

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"


# Channel layer settings

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv("CHAT_REDIS_URL")],
        },
    }
}


# Cloudinary settings

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": os.getenv("CLOUD_NAME"),
    "API_KEY": os.getenv("API_KEY"),
    "API_SECRET": os.getenv("API_SECRET"),
    "SECURE": True,
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "HOST": os.getenv("DB_HOST"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "PORT": int(os.getenv("DB_PORT")) if os.getenv("DB_PORT") else 5432,
        "OPTIONS": {
            "sslmode": "require",
        } if str(os.getenv("DB_HOST")).endswith(".com") else {},
    }
}

if "test" in sys.argv:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }


# Media files (Images)

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # For development
STATIC_ROOT = BASE_DIR / "staticfiles"  # For production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"



# ----------------------------------------------------------------------------------------------------
# AUTH
# ----------------------------------------------------------------------------------------------------

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

    
# Model settings

AUTH_USER_MODEL = "user.User"
KNOX_TOKEN_MODEL = "user.PaletteAuthToken"
SOCIAL_AUTH_USER_MODEL = "user.User"


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.twitter.TwitterOAuth",
]


# REST framework settings

REST_FRAMEWORK = {
    # "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "10/min",
        "user": "20/min",
    },
    "EXCEPTION_HANDLER": "portal.exception_handler.palette_exception_handler",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "user.models.PaletteTokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        
        # OAuth2
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        "drf_social_oauth2.authentication.SocialAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


REST_KNOX = {
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "USER_SERIALIZER": "user.serializers.LoginSerializer",
    "TOKEN_LIMIT_PER_USER": None,
    "AUTO_REFRESH": True,
    "MIN_REFRESH_INTERVAL": 60,
    "AUTH_HEADER_PREFIX": "Token",
}


# Simple_jwt settings

SIMPLE_JWT = {
    "UPDATE_LAST_LOGIN": True,
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "TOKEN_REFRESH_SERIALIZER": "user.serializers.RefreshSerializer",
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=24),
}


SOCIAL_AUTH_JSONFIELD_ENABLED = True # For postgres
SOCIAL_AUTH_REDIRECT_IS_HTTPS = True


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ["email", "profile"]


SOCIAL_AUTH_TWITTER_KEY = os.getenv("SOCIAL_AUTH_TWITTER_KEY")
SOCIAL_AUTH_TWITTER_SECRET = os.getenv("SOCIAL_AUTH_TWITTER_SECRET")
# SOCIAL_AUTH_TWITTER_KEY = 'foobar'
# SOCIAL_AUTH_TWITTER_SECRET = 'bazqux'


SOCIAL_AUTH_PIPELINE = (
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    "social_core.pipeline.social_auth.social_user",
    "social_core.pipeline.user.get_username",
    "social_core.pipeline.social_auth.associate_by_email",
    "portal.pipeline.custom_create_user",
    "social_core.pipeline.social_auth.associate_user",
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
)



# ----------------------------------------------------------------------------------------------------
# MISC
# ----------------------------------------------------------------------------------------------------

CURRENT_HOST = os.getenv("CURRENT_HOST")


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email Configuration

EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
SENDER_EMAIL = os.getenv("SENDER_EMAIL")


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"


SPECTACULAR_SETTINGS = {
    "TITLE": "Palette Portal API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}

# CSP_DEFAULT_SRC = ("'self'", "'unsafe-inline'")
# CSP_IMG_SRC = ("'self'", "data:")


TIME_ZONE = "UTC"


USE_I18N = True


USE_TZ = True